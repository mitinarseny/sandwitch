pragma solidity >= 0.8.17;

// TODO: add import path to compiler
// import "pancake-smart-contracts/projects/exchange-protocol/contracts/libraries/PancakeLibrary.sol";
// import "pancake-smart-contracts/projects/exchange-protocol/contracts/interfaces/IPancakeERC20.sol";
// import "pancake-smart-contracts/projects/exchange-protocol/contracts/interfaces/IPancakeRouter01.sol";
// import "pancake-smart-contracts/projects/exchange-protocol/contracts/interfaces/IPancakeRouter02.sol";
import "baker/lib/BakerLibrary.sol";

contract PancakeToaster {
  IPancakeRouter02 public immutable router;

  modifier ensureDeadline(uint256 deadline) {
    require(deadline >= block.timestamp, "PancakeToaster: EXPIRED");
  }

  modifier ensureTokens(address owner, address token, uint256 value) {
    require(IPancakeERC20(token).balanceOf(owner) >= value, "PancakeLibrary: INSUFFICIENT_BALANCE");
  }

  modifier ensureBalance(address owner, uint256 value) {
    require(owner.balance >= value, "PancakeToaster: INSUFFICIENT_BALANCE");
  }

  constructor(IPancakeRouter02 _router) public {
    router = _router;
  }

  function bake(
    uint256 amountIn,
    uint256 amountOutMin,
    address t0,
    address t1,
  ) internal {
    
  }

  function bakeSwapExactFor(
    uint256 amountIn,
    uint256 amountOutMin,
    address[] calldata path,
  ) internal ensure(from, amountIn) {
    require(path.length >= 2, "PancakeToaster: INVALID_PATH");
    uint256 l;
    (l, amountIn) = BakerLibrary.findAmountOutFor(
      router.factory(),
      amountIn,
      path[:path.length - 1],
      router.WETH(),
    );
    amountOutMin = BakerLibrary.getAmountIn(router.factory(), amountOutMin, path[l+1:]);
  }

  function bakeSwapForExact(
    uint amountOut,
    uint amountInMax,
    address[] calldata path,
  ) internal {

  }

  function bakeSwapExactETHForTokens(
    address from,
    uint256 amountIn,
    uint256 amountOutMin,
    address[] calldata path,
    uint256 deadline,
  ) external ensureDeadline(deadline) {
    require(path[0] == router.WETH(), "PancakeToaster: INVALID_PATH");
    require(from.balance >= amountIn, "PancakeToaster: INSUFFICIENT_BALANCE")
    bakeSwapExactFor(amountIn, amountOutMin, path);
  }

  function bakeSwapExactTokensForTokens(
    address from,
    uint256 amountIn,
    uint256 amountOutMin,
    address[] calldata path,
    uint256 deadline,
  ) external ensureDeadline(deadline) {
    bakeSwapExactFor(amountIn, amountOutMin, path);
  }
}
